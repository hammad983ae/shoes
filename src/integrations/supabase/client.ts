// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://uvczawicaqqiyutcqoyg.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InV2Y3phd2ljYXFxaXl1dGNxb3lnIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTMwNjczNDAsImV4cCI6MjA2ODY0MzM0MH0.m3NCcH46Dfce34aVgEYbF08Bh_6rkMIDB6UF6z6xLLY";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
    debug: true,
    flowType: 'pkce'
  },
  global: {
    headers: {
      'x-client-info': 'supabase-js-web'
    }
  }
});

// üöÄ KEEP-ALIVE PING SYSTEM
let keepAliveInterval: NodeJS.Timeout | null = null;

const startKeepAlive = () => {
  if (keepAliveInterval) return;
  
  keepAliveInterval = setInterval(async () => {
    try {
      console.log("üíì Sending keepalive ping...");
      await supabase.from('profiles').select('id').limit(1);
      console.log("‚úÖ Keepalive ping successful");
    } catch (error) {
      console.warn("‚ö†Ô∏è Keepalive ping failed:", error);
    }
  }, 180000); // 3 minutes
};

const stopKeepAlive = () => {
  if (keepAliveInterval) {
    clearInterval(keepAliveInterval);
    keepAliveInterval = null;
  }
};

// üîß UTILITY: Backend Wake-up RPC
export const wakeUpBackend = async (): Promise<boolean> => {
  try {
    console.log("üî• Waking up backend services...");
    
    // Try multiple wake-up strategies
    const wakePromises = [
      supabase.from('profiles').select('id').limit(1),
      supabase.functions.invoke('wake-up-backend').catch(() => null), // Wake-up edge function
    ];
    
    await Promise.allSettled(wakePromises);
    console.log("‚úÖ Backend wake-up completed");
    return true;
  } catch (error) {
    console.warn("‚ö†Ô∏è Backend wake-up failed:", error);
    return false;
  }
};

// üîß UTILITY: Session validation with forced refresh
export const validateSession = async (): Promise<boolean> => {
  try {
    const { data: { session }, error } = await supabase.auth.getSession();
    
    if (error) {
      console.error("‚ùå Session validation error:", error);
      return false;
    }
    
    if (!session) {
      console.warn("üîÅ No session found during validation");
      return false;
    }

    // Check if session is about to expire (within 5 minutes)
    const expiresAt = session.expires_at;
    const now = Math.floor(Date.now() / 1000);
    const timeUntilExpiry = expiresAt ? expiresAt - now : 0;
    
    if (timeUntilExpiry < 300) {
      console.log("‚è∞ Session expiring soon, forcing refresh...");
      const { error: refreshError } = await supabase.auth.refreshSession();
      
      if (refreshError) {
        console.error("‚ùå Forced session refresh failed:", refreshError);
        return false;
      }
      
      console.log("‚úÖ Session refreshed successfully");
    }
    
    return true;
  } catch (error) {
    console.error("üí• Session validation threw error:", error);
    return false;
  }
};

// üîç ENHANCED DIAGNOSTIC: Global auth event monitoring
supabase.auth.onAuthStateChange(async (event, session) => {
  console.log(`üåÄ Auth Event: ${event} at ${new Date().toISOString()}`);
  
  switch (event) {
    case 'SIGNED_IN':
      console.log("‚úÖ User signed in, starting keepalive");
      startKeepAlive();
      break;
      
    case 'SIGNED_OUT':
      console.log("üö™ User signed out, stopping keepalive");
      stopKeepAlive();
      if (!session) {
        console.log("üö® CRITICAL: Unexpected SIGNED_OUT event detected");
        console.log("üìç Location:", window.location.href);
        console.log("üïê Timestamp:", new Date().toISOString());
        
        const authKeys = Object.keys(localStorage).filter(key => 
          key.includes('auth') || key.includes('supabase'));
        console.log("üîë Auth keys in localStorage:", authKeys);
      }
      break;
      
    case 'TOKEN_REFRESHED':
      console.log("üîÑ Token refreshed successfully");
      break;
      
    case 'INITIAL_SESSION':
      if (session) {
        console.log("üèÅ Initial session loaded, starting keepalive");
        startKeepAlive();
      }
      break;
  }
  
  if (session) {
    console.log(`üì¶ Session info: expires in ${Math.floor((session.expires_at! * 1000 - Date.now()) / 60000)} minutes`);
  }
});